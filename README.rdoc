== README

--wakayama.rbで作ったテーブルの内容をダイアログに表示するライブラリ

--機能
*テーブルをダイアログに表示する機能
*ダイアログ上で項目を選択した場合は選択した場合はその項目をダイアログを表示する前の画面に表示する機能

--機能確認方法
*起動して、user情報作成を選択して、作成または編集を選択して、検索ボタンを押すか、テキストボックス上でF3を押す

--起動イメージ
*screen_image.pngを参照してください (https://github.com/KazuyaTanizawa/wakayamarb_dialog/blob/master/screen_image.png)



*必要ライブラリ*
 jQuery
 jQueryUI

*使い方*
 */app/controllers/dialog_input_controller.rb をプロジェクトに追加: ajaxのサーバー側の処理をします
 */app/views/dialog_input/select.js.erb,selected.js.erb をプロジェクトに追加: ajaxのサーバー側(javascriptの部分の実行)
 *レイアウトもしくはビューに以下を追加
    //dialoginputを呼び出すようにする
    <script >
        $(function() {
            $('.dialoginput_g').dialoginput('');           //dialoginputの呼び出し
        });
    </script>

    //dialoginput内で使うdiv をセット。
    <div id="selected_dialog">
        <div id="select_search"></div>
        <div id="select_table"></div>
    </div>

 */app/assets/javascripts/dialog_input.jsをプロジェクトに追加　java scriptの処理　ダイアログ上でのjavascriptの処理をしています。
 */app/assets/stylesheets/dialog_input.css.scssをプロジェクトに追加　ダイアログ上での選択色を設定しています
 */config/locales/routes.rbに以下を追加
        get "dialog_input/select"
        get "dialog_input/selected"
 *view内に設定ファイルの追加

     <%= f.text_field :code,  :size => 4  ,
                      :class => "dialoginput dialoginput_g",  // 二つのクラスを追加
                      "data-field" => "code",                 //このテキストボックスに対応するフィールド名
                      "data-group" => "1",                    //グループID  同じグループは同じ文字列にする必要があります
                      "data-diid" => "11",                    //ユニークな文字列にする必要がある。ダイアログから戻った時のフォーカスの位置をセットする時に使っています
                      "data-id" => "dialoginput_1",          //検索に必要な情報が入っているid(#は入れません）
                      "data-dpath" => "../../"%>             //相対パスを設定
     <span id="dialoginput_1"
           data-sql="select name,phone,code from users  "     //ダイアログに表示する為のsql(最後には";"をつけない)
                                                              //全て文字としてselectする必要がある。idなどは数値なので
                                                              //trim(to_char(id,'99999')) as idなどとする
           data-sqlwhere=""                                   //検索条件を手動で入れる場合
           data-table="User"                                  //sqlのfromで使っているモデルクラス名　モデルを作っておく必要が有ります
           data-idfield="code"                                //プライマリーキー。複合キーの場合はdata-sqlでこのキーがプリマリーキーになるように抽出している必要がある
           data-fields="name phone code"                      //ダイアログ場に表示するフィールド（半角スペースで区切る）
           data-fielddisps="name phone code"></span>          //data-fieldsに対応したタイトル文字（半角スペースで区切る）

           他の入力データを参照する場合　以下のように@@囲む。内部的にはdata-diidの中で@@で囲まれた文字列を探しに行って、その値をセットするようにしています。
                   "data-sql" => "select ecode,name from tmei where tcode = '@200@'"
     <a
           class="dialoginput_g"                              //クラス追加
           data-field="name"                                  //フィールド名（ダイアログで選択した内容で、設定しているフィールド名の内容がここに表示されます）
           data-group="1">                                    //グループID
           <%= User.where(:code => @userlist.code).first.try("name") %>
     </a>
     <button
            class="dialoginput dialoginput_g "               // 二つのクラスを追加
            data-diid="11"                                   //このテキストボックスに対応するフィールド名
            data-group="1"                                   //グループID  同じグループは同じ文字列にする必要があります
            data-id="dialoginput_1"                          //検索に必要な情報が入っているid(#は入れません
            data-dpath = "../../"                            //相対パスを設定
            name="button"
            type="button">検索
     </button>

*注意*
turbolinksが入っているどうもjQueryの動きが不安定になっているので、外す必要が有ります

